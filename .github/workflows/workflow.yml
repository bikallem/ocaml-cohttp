name: Main workflow

on:
  workflow_dispatch:
  pull_request:
  push:
  schedule:
    # Prime the caches every Monday
    - cron: 0 1 * * MON

jobs:
  build-test-non-domain-packages:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        ocaml-compiler:
          - ocaml-variants.4.08.1+afl
        local-packages:
          - |
            *.opam
            !cohttp-eio.opam

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Use OCaml ${{ matrix.ocaml-compiler }}
        uses: ocaml/setup-ocaml@v2
        with:
          ocaml-compiler: ${{ matrix.ocaml-compiler }}
          dune-cache: ${{ matrix.os == 'ubuntu-latest' }}
          opam-depext-flags: --with-test
          opam-local-packages: ${{ matrix.local-packages }}

      - run: yarn --frozen-lockfile
        working-directory: cohttp_lwt_jsoo_test

      - run: echo "PKG_CONFIG_PATH=$(brew --prefix openssl)/lib/pkgconfig" >>"$GITHUB_ENV"
        if: ${{ matrix.os == 'macos-latest' }}

      - run: opam depext -i re uri uri-sexp sexplib0 ppx_sexp_conv stringext fmt alcotest conf-libev lwt cmdliner conduit-lwt-unix magic-mime logs ounit js_of_ocaml-lwt js_of_ocaml-ppx async async_unix base core core_unix conduit-async mirage-crypto ipaddr conduit-mirage mirage-kv astring base_quickcheck ppx_assert ppx_compare ppx_here core_bench crowbar ocurl mirage-channel lwt_ppx

      - run: opam exec -- dune build -p http,cohttp,cohttp-lwt,cohttp-lwt-unix,cohttp-server-lwt-unix,cohttp-lwt-jsoo,cohttp-mirage,cohttp-async,cohttp-curl-async,cohttp-curl-lwt,cohttp-curl,cohttp-top --profile release

      - run: opam exec -- dune runtest bench cohttp cohttp-async cohttp-curl cohttp-curl-async cohttp-curl-lwt cohttp-lwt cohttp-lwt-jsoo cohttp-lwt-unix cohttp-mirage cohttp-server-lwt-unix cohttp-top cohttp_async_test cohttp_lwt_jsoo_test cohttp_lwt_unix_test cohttp_server cohttp_test http --profile release

      - run: opam exec -- make js-test

  build-test-cohttp-eio:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        ocaml-compiler:
          - ocaml-variants.4.12.0+domains
        local-packages:
          - |
            http.opam
            cohttp-eio.opam

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Use OCaml ${{ matrix.ocaml-compiler }}
        uses: ocaml/setup-ocaml@v2
        with:
          ocaml-compiler: ${{ matrix.ocaml-compiler }}
          dune-cache: ${{ matrix.os == 'ubuntu-latest' }}
          opam-local-packages: ${{ matrix.local-packages }}

      - run: opam install cstruct eio_main bigstringaf fmt mdx

      - run: opam exec -- dune build -p http,cohttp-eio

      - run: opam exec -- dune runtest cohttp-eio
